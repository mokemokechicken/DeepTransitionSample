// -*- tab-width: 4; -*- Generator: http://goodparts.d.yumemi.jp/generator#StateMachineGenerator--20d17ef876bd0a8adec55c4fe01af7cc57420a49
// -*- coding: utf-8 -*-

//
// This file is automatically generated by State Machine Generator.
//

import Foundation

public protocol TransitionModel_Action {
    func addViewController()
    func confirmRemoveOK()
    func removeViewControllers()
}

/*
public class TransitionViewControllerModel : TransitionModel_Action {
    public func addViewController() {}
    public func confirmRemoveOK() {}
    public func removeViewControllers() {}
}
*/

public class TransitionModel_TransitionModelFSM {

    private var currentState : TransitionModel_TransitionModelStateMap_State?
    private var previousState : TransitionModel_TransitionModelStateMap_State?
    public var debugMode = false
    weak var ctxt : TransitionViewControllerModel?

    public init(context: TransitionViewControllerModel) {
        self.currentState = TransitionModel_TransitionModelStateMap._IDLE
        self.ctxt = context
    }

    public func enterStartState() {
        if let context = ctxt {
            currentState!.Entry(self, ctxt: context)
        }
    }

    private func setState(state:TransitionModel_TransitionModelStateMap_State) {
        currentState = state;
        if (debugMode) {
            NSLog("ENTER STATE: %s", state.getName())
        }
    }

    public func Default() {
        if let context = ctxt {
            currentState!.Default(self, ctxt: context)
        }
    }

    public func cancel() {
        if let context = ctxt {
            currentState!.cancel(self, ctxt: context)
        }
    }

    public func finish_adding() {
        if let context = ctxt {
            currentState!.finish_adding(self, ctxt: context)
        }
    }

    public func finish_removing() {
        if let context = ctxt {
            currentState!.finish_removing(self, ctxt: context)
        }
    }

    public func ok() {
        if let context = ctxt {
            currentState!.ok(self, ctxt: context)
        }
    }

    public func request() {
        if let context = ctxt {
            currentState!.request(self, ctxt: context)
        }
    }

}



private protocol TransitionModel_TransitionModelStateMap_State {
    func getName() -> String
    func Entry(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionViewControllerModel)
    func Exit(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionViewControllerModel)
    func Default(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionViewControllerModel)
    func cancel(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionViewControllerModel)
    func finish_adding(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionViewControllerModel)
    func finish_removing(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionViewControllerModel)
    func ok(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionViewControllerModel)
    func request(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionViewControllerModel)
}
let TransitionModel_TransitionModelStateMap = _TransitionModel_TransitionModelStateMap()

public class _TransitionModel_TransitionModelStateMap {
    let _Default = Default()
    let _ADDING = ADDING()
    let _REMOVING = REMOVING()
    let _CONFIRMING = CONFIRMING()
    let _IDLE = IDLE()

    public class TransitionModel_TransitionModelStateMap_StateImpl : TransitionModel_TransitionModelStateMap_State {
        func getName() -> String { return "" }
        func Entry(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionViewControllerModel) {}
        func Exit(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionViewControllerModel) {}
        func Default(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionViewControllerModel) { abort() }
        func cancel(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionViewControllerModel) {
            Default(fsm, ctxt: ctxt)
        }
        func finish_adding(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionViewControllerModel) {
            Default(fsm, ctxt: ctxt)
        }
        func finish_removing(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionViewControllerModel) {
            Default(fsm, ctxt: ctxt)
        }
        func ok(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionViewControllerModel) {
            Default(fsm, ctxt: ctxt)
        }
        func request(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionViewControllerModel) {
            Default(fsm, ctxt: ctxt)
        }
    }

    public class Default : TransitionModel_TransitionModelStateMap_StateImpl {
        override public func getName() -> String { return "Default" }

        override public func Entry(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionViewControllerModel) {
        }

        override public func Exit(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionViewControllerModel) {
        }

        override public func Default(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionViewControllerModel) {
            fsm.previousState = fsm.currentState
            fsm.currentState = fsm.previousState
        }

    }

    public class ADDING : Default {
        override public func getName() -> String { return "ADDING" }

        override public func Entry(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionViewControllerModel) {
            ctxt.addViewController()
        }

        override public func Exit(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionViewControllerModel) {
        }

        override public func finish_adding(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionViewControllerModel) {
            fsm.currentState!.Exit(fsm, ctxt: ctxt)
            fsm.previousState = fsm.currentState
            fsm.setState(TransitionModel_TransitionModelStateMap._IDLE)
            fsm.currentState!.Entry(fsm, ctxt: ctxt)
        }

    }

    public class REMOVING : Default {
        override public func getName() -> String { return "REMOVING" }

        override public func Entry(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionViewControllerModel) {
            ctxt.removeViewControllers()
        }

        override public func Exit(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionViewControllerModel) {
        }

        override public func finish_removing(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionViewControllerModel) {
            fsm.currentState!.Exit(fsm, ctxt: ctxt)
            fsm.previousState = fsm.currentState
            fsm.setState(TransitionModel_TransitionModelStateMap._ADDING)
            fsm.currentState!.Entry(fsm, ctxt: ctxt)
        }

    }

    public class CONFIRMING : Default {
        override public func getName() -> String { return "CONFIRMING" }

        override public func Entry(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionViewControllerModel) {
            ctxt.confirmRemoveOK()
        }

        override public func Exit(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionViewControllerModel) {
        }

        override public func cancel(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionViewControllerModel) {
            fsm.currentState!.Exit(fsm, ctxt: ctxt)
            fsm.previousState = fsm.currentState
            fsm.setState(TransitionModel_TransitionModelStateMap._IDLE)
            fsm.currentState!.Entry(fsm, ctxt: ctxt)
        }

        override public func ok(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionViewControllerModel) {
            fsm.currentState!.Exit(fsm, ctxt: ctxt)
            fsm.previousState = fsm.currentState
            fsm.setState(TransitionModel_TransitionModelStateMap._REMOVING)
            fsm.currentState!.Entry(fsm, ctxt: ctxt)
        }

    }

    public class IDLE : Default {
        override public func getName() -> String { return "IDLE" }

        override public func Entry(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionViewControllerModel) {
        }

        override public func Exit(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionViewControllerModel) {
        }

        override public func request(fsm:TransitionModel_TransitionModelFSM, ctxt:TransitionViewControllerModel) {
            fsm.currentState!.Exit(fsm, ctxt: ctxt)
            fsm.previousState = fsm.currentState
            fsm.setState(TransitionModel_TransitionModelStateMap._CONFIRMING)
            fsm.currentState!.Entry(fsm, ctxt: ctxt)
        }

    }
}
